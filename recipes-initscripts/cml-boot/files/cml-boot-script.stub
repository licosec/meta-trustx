function scan_devices {
	udevadm trigger --type=subsystems --action=add
	sleep 2
	udevadm settle
	udevadm trigger --type=devices --action=add
	sleep 2
	udevadm settle
}

clear

cat /etc/init_ascii

echo "-- cml init log on $LOGTTY [ready]"
echo "-- waiting for c0 to start ..."

exec > /dev/$LOGTTY
exec 2>&1


PATH=/sbin:/bin:/usr/sbin:/usr/bin

mkdir -p /lib/firmware
mkdir -p /proc
mkdir -p /sys
mkdir -p /run

mount /proc
mount /sys
mount /dev
mount /run

mkdir -p /sys/kernel/security
mount -t securityfs securityfs /sys/kernel/security

echo -n "\
appraise func=MODULE_CHECK appraise_type=imasig|modsig
measure func=MODULE_CHECK template=ima-modsig
appraise func=FIRMWARE_CHECK
measure func=FIRMWARE_CHECK template=ima-sig
" > /sys/kernel/security/ima/policy

mkdir -p /dev/pts
mount /dev/pts

# do not log kernel messages to console
echo 1 > /proc/sys/kernel/printk

mkdir -p /dev/shm
mkdir -p /data

udevd --daemon
scan_devices

if [ -e "/dev/tpm0" ]; then
	echo "$(blkid)"
	echo "Waiting for '/dev/disk/by-label/boot' "
	while [ ! -e /dev/disk/by-label/boot ] && [ ! -e /dev/disk/by-label/BOOT ];do
		echo -n "."
		scan_devices
	done

	CRYPTO_HDD=$(basename $(readlink /dev/disk/by-label/trustme))
	BOOT_HDD=$(basename $(readlink /dev/disk/by-label/boot))

	echo "CRYPTO_HDD: $(CRYPTO_HDD)"
	echo "BOOT_HDD: $(BOOT_HDD)"

	if [ "${BOOT_HDD}" == "" ];then
		BOOT_HDD=$(basename $(readlink /dev/disk/by-label/BOOT))
	fi

	# check if crypto hdd is unencrypted during setup
	if [ "${CRYPTO_HDD}" == "" ]; then
		CRYPTO_HDD=${BOOT_HDD::-1}2
	else
		echo "${CRYPTO_HDD} is not encrypted. Will do otf."
		do_otf="do"
	fi

	echo "Starting TPM/TSS 2.0 Helper Daemon (tpm2d) for disk encryption of ${CRYPTO_HDD}"
	tpm2d -n &

	if [ ! -S /run/socket/cml-tpm2d-control ]; then
		echo "Waiting for tpm2d's control interface"
	fi
	while [ ! -S /run/socket/cml-tpm2d-control ]; do
		echo -n "."
		sleep 1
	done

	# here optionally it could be asked for a password
	tpm2_control dmcrypt_setup /dev/${CRYPTO_HDD}
	tpm2_control exit

	while [ ! -e /dev/mapper/${CRYPTO_HDD} ]; do
		echo Waiting for /dev/mapper/${CRYPTO_HDD}
		sleep 1
	done

	udevadm trigger --type=devices --action=add
	udevadm settle

	# if crypto hdd is unencrypted, initially encrypt it here
	if [ "$do_otf" == "do" ]; then
		exec > /dev/console
		exec 2>&1

		size=$(fdisk -l /dev/${CRYPTO_HDD} | head -n1 | awk '{print $5}')
		echo "-- Doing on-the-fly encryption of ${CRYPTO_HDD} size=${size} ..."
		dd if=/dev/${CRYPTO_HDD} bs=512 status=none | pv -s ${size} | dd of=/dev/mapper/${CRYPTO_HDD} bs=512
		if [ $? -ne 0 ]; then
			echo "-- FATAL: Encryption failed! Restart System Setup!"
			exit 1;
		fi
		echo "-- Encryption of ${CRYPTO_HDD} done!"

		exec > /dev/$LOGTTY
		exec 2>&1
	fi

	mount /dev/mapper/${CRYPTO_HDD} /mnt
	if [ $? -ne 0 ]; then
		echo "ERROR: Encryption failed! Reboot System and retry!" > /dev/console
		exit 1;
	fi
fi

mount -a

mkdir -p /mnt/extdata
mount LABEL=extdata -o nosuid,nodev,noexec /mnt/extdata
if [ $? -eq 0 ]
then
	mkdir -p /mnt/extdata/workdir
	mkdir -p /mnt/extdata/data
	mount -t overlay overlay -o lowerdir=/mnt/userdata,upperdir=/mnt/extdata/data,workdir=/mnt/extdata/workdir /data
	if [ $? -ne 0 ]
	then
		echo "WARN: Failed to mount external data as overlayfs"
		mount -o bind,nosuid,nodev,noexec /mnt/userdata /data
	fi
else
	echo "No extdata fs supplied"
	mount -o bind,nosuid,nodev,noexec /mnt/userdata /data
fi

mkdir -p /data/cml/containers_overlay
mount LABEL=containers -o nosuid,nodev,noexec,nofail /data/cml/containers_overlay
if [ $? -eq 0 ]
then
	mkdir -p /data/cml/containers_overlay/work
	mkdir -p /data/cml/containers_overlay/data
	mount -t overlay overlay -o lowerdir=/data/cml/containers,upperdir=/data/cml/containers_overlay/data,workdir=/data/cml/containers_overlay/work /data/cml/containers
	if [ $? -ne 0 ]
	then
		echo "WARN: Failed to mount containers btrfs as overlayfs"
	fi
else
	echo "No containers fs supplied"
fi

mkdir -p /data/logs

#now modules partition is mounted
echo "Waiting for devices"
for i in {1..4}; do
	echo -n "."
	scan_devices
done

modprobe loop
modprobe btrfs
modprobe vport-gre
modprobe cfg80211

mount -a

mkdir -p /var/volatile/tmp


export PATH="/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin"

echo "Starting Compartment Manager Daemon (cmld)"
cmld &
echo "${CML_START_MSG}" > /dev/console

exec /sbin/init > /dev/$LOGTTY 2>&1
